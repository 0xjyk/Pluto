TOKEN(LSQBRACREP, 91, "<:")
TOKEN(RSQBRACREP, 93, ":>")
TOKEN(LCBRACREP, 123, "<%")
TOKEN(RCBRACREP, 125, "%>")
TOKEN(HASHREP, 35, "%:")
TOKEN(HHASHREP, 255, "%:%:")

TOKEN(ID, 0, "identifier")
TOKEN(KEYWORD, 1, "keyword")
TOKEN(PUNCT, 2, "punctuation")
TOKEN(ERROR, 3, "error")
TOKEN(ULLONG, 4, "unsigned long long int")
TOKEN(SLLONG, 5, "long long int")
TOKEN(ULONG, 6, "unsigned long int")
TOKEN(SLONG, 7, "long int")
TOKEN(UINT, 8, "unsigned int") 
TOKEN(SINT, 9, "int")
TOKEN(SDOUBLE, 10, "double")
TOKEN(LDOUBLE, 11, "long double")
TOKEN(SFLOAT, 12, "float")
TOKEN(UCHAR, 13, "unsigned char") 
TOKEN(SCHAR, 14, "signed char") 
TOKEN(CHAR16, 15, "char 16")
TOKEN(CHAR32, 16, "char 32")
TOKEN(STR, 17, "string")
TOKEN(INTCONST, 18, "int const")
TOKEN(FLOATCONST, 19, "float const")
TOKEN(NOT, 33, "!")
TOKEN(HASH, 35, "#")
TOKEN(MOD, 37, "%")
TOKEN(BAND, 38, "&")
TOKEN(LBRAC, 40, "(")
TOKEN(RBRAC, 41, ")")
TOKEN(STAR, 42, "*")
TOKEN(PLUS, 43, "+")
TOKEN(COM, 44, ",")
TOKEN(NEG, 45, "-")
TOKEN(DOT, 46, ".")
TOKEN(DIV, 47, "/")
TOKEN(COL, 58, ":")
TOKEN(SCOL, 59, ";")
TOKEN(LESS, 60, "<")
TOKEN(ASSIGN, 61, "=")
TOKEN(GREATER, 62, ">")
TOKEN(Q, 63, "?")
TOKEN(LSQBRAC, 91, "[")
TOKEN(RSQBRAC, 93, "]")
TOKEN(XOR, 94, "^")
TOKEN(LCBRAC, 123, "{")
TOKEN(BOR, 124, "|")
TOKEN(RCBRAC, 125, "}")
TOKEN(BNOT, 126, "~")



TOKEN(ARROW, 233, "->")
TOKEN(INCR, 234, "++")
TOKEN(DECR, 235, "--")
TOKEN(LSHFT, 236, "<<")
TOKEN(RSHFT, 237, ">>")
TOKEN(LEQ, 238, "<=")
TOKEN(GEQ, 239, ">=")
TOKEN(EQ, 240, "==")
TOKEN(NEQ, 241, "!=")
TOKEN(AND, 242, "&&")
TOKEN(OR, 243, "||")
TOKEN(ELLIPS, 244, "...")
TOKEN(MULTEQ, 245, "*=")
TOKEN(DIVEQ, 246, "/=")
TOKEN(MODEQ, 247, "%=")
TOKEN(INCREQ, 248, "+=")
TOKEN(DECREQ, 249, "-=")
TOKEN(LSHFTEQ, 250, "<<=")
TOKEN(RSHFTEQ, 251, ">>=")
TOKEN(ANDEQ, 252,"&=")
TOKEN(XOREQ, 253, "^=")
TOKEN(OREQ, 254, "|=")
TOKEN(HHASH, 255, "##")
TOKEN(EOI, 256, "end of input")


KEY(BREAK, 128, "break")
KEY(CASE, 129, "case")
KEY(CONTINUE, 130, "continute")
KEY(DEFAULT, 131, "default")
KEY(DO, 132, "do")
KEY(ELSE, 133, "else")
KEY(FOR, 134, "for")
KEY(GOTO, 135, "goto")
KEY(IF, 136, "if")
KEY(RETURN, 137, "return")
KEY(SIZEOF, 138, "sizeof")
KEY(SWITCH, 139, "switch")
KEY(WHILE, 140, "while")
KEY(_ALIGNOF, 141, "_Alignof")
KEY(_GENERIC, 142, "_Generic")
KEY(_IMAGINARY, 143, "_Imaginary")
KEY(_STATIC_ASSERT, 144, "_Static_assert")


// a few are not really keywords, utilised by types.c
// type specifiers
KEY(CHAR, 145, "char")
KEY(SHORT, 146, "short")
KEY(INT, 147, "int")
KEY(LONG, 148, "long")
KEY(UNSIGNED, 149, "unsigned")
KEY(SIGNED, 150, "signed")
KEY(FLOAT, 151, "float")
KEY(DOUBLE, 152, "double")

KEY(STRUCT, 153, "struct")
KEY(UNION, 154, "union")
KEY(ENUM, 155, "enum")

KEY(VOID, 156, "void")

KEY(FUNCTION, 157, "function")
KEY(ARRAY, 158, "array")
KEY(POINTER, 159, "pointer")
KEY(_BOOL, 160, "_Bool")
KEY(_COMPLEX, 161, "_Complex")

// type qualifiers
KEY(CONST, 162, "const")
KEY(VOLATILE, 163, "volatile")
KEY(RESTRICT, 164, "restrict")
KEY(_ATOMIC, 165, "_Atomic")

// storage class specifiers
KEY(TYPEDEF, 166, "typedef")
KEY(EXTERN, 167, "extern")
KEY(STATIC, 168, "static")
KEY(_THREAD_LOCAL, 169, "_Thread_local")
KEY(AUTO, 170, "auto")
KEY(REGISTER, 171, "register")

// alignment specifiers
KEY(_ALIGNAS, 172, "_Alignas")

// function specifiers 
KEY(INLINE, 173, "inline")
KEY(_NORETURN, 174, "_Noreturn")

// implementation defined type
TOKEN(NULLT, 174, "null")


