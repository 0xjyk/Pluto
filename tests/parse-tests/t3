_Static_assert((a = b += c *= d /= e %= f ^= g |= h &= i >>= j <<= k), "complex assignment");
_Static_assert(a ? b : c ? d : e ? f : g ? h : i ? j : k, "nested ternary operators");
_Static_assert(a || b && c | d ^ e & f == g != h < i > j <= k >= l << m >> n + o - p * q / r % s, "mixed precedence");
_Static_assert(*p++ + --q[5] - r->s.t[u++][--v] * w(x += y, z /= 2), "pointer and array operations");
_Static_assert((a ? b : c) || (d && e) | (f ^ g) & (h == i) != (j < k) > (l <= m) >= (n << o) >> (p + q) - (r * s) / (t % u), "Parenthesized operations");
_Static_assert(~!+-(a * b + c / d % e) << f >> g & h ^ i | j && k || l, "Unary and binary operations");
_Static_assert((a->b.c[d++]->e[--f] *= g(h, i) + j(k[l], m->n)) / o(p, q), "Member access and function calls");
_Static_assert((a ? b : c ? d : e) ? (f && g || h) : (i | j ^ k & l), "Nested conditionals and logical operations");
_Static_assert((a << b | c >> d) & (e + f * g - h / i) ^ (j % k) || (l && m), "Bitwise and arithmetic operations");
_Static_assert(a ? b ? c ? d : e : f : g ? h ? i : j : k ? l : m, "Deeply nested ternary operators");
_Static_assert((a & b | c ^ d) && (e < f || g > h) ? (i <= j ? k : l) : (m >= n ? o : p), "Bitwise, logical, and conditional operations");
_Static_assert(~(a << b) ^ !(c >> d) & +(*e) | -(*f) + (g ? h : i) * (j || k) / (l && m), "Unary, bitwise, and arithmetic operations");
_Static_assert(a[b ? c : d][e || f][g && h] + i->j.k[l++ ? *m : n[o--]], "Array indexing with conditionals");
_Static_assert(*p++ + q[r++] + s[t--] * (u->v.w[x++] - y.z[--a]) / b[c ? d : e][f || g], "Complex pointer and array operations");
_Static_assert(a->b->c->d[e++][--f] && g(h(i, j), k(l, m)) + n(o[p], q->r) / s(t, u), "Nested member access and function calls");
